--
-- PAM event types we expect to be logged:
--
CREATE TYPE log_event_t AS ENUM ('unknown', 'auth', 'open_session', 'close_session');
--
-- Each connection attempt gets logged as the source IP address and TCP
-- port with the user identifier that was provided by the remote side.
--
CREATE TABLE inet_log (
    dst_ipaddr      INET NOT NULL,
    src_ipaddr      INET NOT NULL,
    src_port        INTEGER NOT NULL,
    log_event       log_event_t NOT NULL DEFAULT 'unknown',
    uid             TEXT NOT NULL,
    log_date        TIMESTAMP WITH TIME ZONE DEFAULT now()
);
CREATE INDEX inet_log_dst_ipaddr ON inet_log(dst_ipaddr);
CREATE INDEX inet_log_src_ipaddr ON inet_log(src_ipaddr);
CREATE INDEX inet_log_uid ON inet_log(uid);

--
-- This table is present to provide a record layout for the fixed-prefix views
-- and arbitrary-prefix generator function.  The ipaddr (type INET) field is
-- replaced with an ipnet (type CIDR) field.
--
CREATE TABLE nets (
    dst_ipaddr      INET NOT NULL,
    ipnet           CIDR UNIQUE NOT NULL,
    log_count       INTEGER NOT NULL DEFAULT 1,
    start_date      TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    end_date        TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE TABLE agg_nets (
    ipnet           CIDR UNIQUE NOT NULL,
    log_count       INTEGER NOT NULL DEFAULT 1,
    start_date      TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    end_date        TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

--
-- Mimic the simpler by-count table format with the full data.  Rather
-- than create fixed-prefix views situated atop the ips view, we'll create
-- them explicitly attached to the original data source.
--
CREATE VIEW ips AS
    SELECT dst_ipaddr, src_ipaddr AS ipaddr, COUNT(*) as log_count, MIN(log_date) AS start_date, MAX(log_date) AS end_date
        FROM inet_log
        GROUP BY dst_ipaddr, src_ipaddr;
CREATE OR REPLACE VIEW nets_24 AS
    SELECT  dst_ipaddr,
            network(set_masklen(src_ipaddr, 24)) AS ipnet,
            COUNT(*) AS log_count,
            MIN(log_date) AS start_date,
            MAX(log_date) AS end_date
    FROM inet_log
    GROUP BY dst_ipaddr, ipnet;
CREATE OR REPLACE VIEW nets_16 AS
    SELECT  dst_ipaddr,
            network(set_masklen(src_ipaddr, 16)) AS ipnet,
            COUNT(*) AS log_count,
            MIN(log_date) AS start_date,
            MAX(log_date) AS end_date
    FROM inet_log
    GROUP BY dst_ipaddr, ipnet;
CREATE OR REPLACE VIEW nets_8 AS
    SELECT  dst_ipaddr,
            network(set_masklen(src_ipaddr, 8)) AS ipnet,
            COUNT(*) AS log_count,
            MIN(log_date) AS start_date,
            MAX(log_date) AS end_date
    FROM inet_log
    GROUP BY dst_ipaddr, ipnet;
CREATE OR REPLACE FUNCTION nets_view(prefix_len INTEGER) RETURNS SETOF nets
AS $$
    SELECT  dst_ipaddr,
            network(set_masklen(src_ipaddr, prefix_len)) AS ipnet,
            COUNT(*) AS log_count,
            MIN(log_date) AS start_date,
            MAX(log_date) AS end_date
    FROM inet_log
    GROUP BY dst_ipaddr, ipnet;
$$ LANGUAGE SQL;


CREATE VIEW agg_ips AS
    SELECT src_ipaddr AS ipaddr, COUNT(*) as log_count, MIN(log_date) AS start_date, MAX(log_date) AS end_date
        FROM inet_log
        GROUP BY src_ipaddr;
CREATE OR REPLACE VIEW agg_nets_24 AS
    SELECT  network(set_masklen(src_ipaddr, 24)) AS ipnet,
            COUNT(*) AS log_count,
            MIN(log_date) AS start_date,
            MAX(log_date) AS end_date
    FROM inet_log
    GROUP BY ipnet;
CREATE OR REPLACE VIEW agg_nets_16 AS
    SELECT  network(set_masklen(src_ipaddr, 16)) AS ipnet,
            COUNT(*) AS log_count,
            MIN(log_date) AS start_date,
            MAX(log_date) AS end_date
    FROM inet_log
    GROUP BY ipnet;
CREATE OR REPLACE VIEW agg_nets_8 AS
    SELECT  network(set_masklen(src_ipaddr, 8)) AS ipnet,
            COUNT(*) AS log_count,
            MIN(log_date) AS start_date,
            MAX(log_date) AS end_date
    FROM inet_log
    GROUP BY ipnet;
CREATE OR REPLACE FUNCTION agg_nets_view(prefix_len INTEGER) RETURNS SETOF agg_nets
AS $$
    SELECT  network(set_masklen(src_ipaddr, prefix_len)) AS ipnet,
            COUNT(*) AS log_count,
            MIN(log_date) AS start_date,
            MAX(log_date) AS end_date
    FROM inet_log
    GROUP BY ipnet;
$$ LANGUAGE SQL;

--
-- Rather than have the daemon do INSERTs into the table, data
-- injection is via this function.  If the internal structure of the
-- table were to change, altering the INSERT query, this function
-- can be altered without having to rebuild the daemon.
--
-- Likewise, if we need to do some filtering of incoming data, this
-- function could be modified to pre-flight the data and do the INSERT
-- only when necessary (again, without any change to the daemon).
--
CREATE OR REPLACE FUNCTION log_one_event(
    in_dst_ipaddr   TEXT,
    in_src_ipaddr   TEXT,
    in_src_port     TEXT,
    in_log_event    TEXT,
    in_uid          TEXT,
    in_log_date     TEXT
) RETURNS void AS $$
    INSERT INTO inet_log (dst_ipaddr, src_ipaddr, src_port, log_event, uid, log_date)
        VALUES (in_dst_ipaddr::INET,
                in_src_ipaddr::INET,
                in_src_port :: INTEGER,
                in_log_event::log_event_t,
                in_uid,
                in_log_date::TIMESTAMP WITH TIME ZONE);
$$ LANGUAGE SQL;


--
-- This variant on the log_one_event() function consults a table
-- of subnets (as CIDR tuples) for events we don't want to log.
-- If the event src_ipaddr is within any of the subnets listed,
-- the event is NOT logged.
--
-- The conditional means we can't just do an SQL stored function
-- and we need PL/pgSQL.
--
CREATE TABLE inet_filter (
    deny_subnet     CIDR UNIQUE NOT NULL
);
--
CREATE OR REPLACE FUNCTION log_one_event(
    in_dst_ipaddr   TEXT,
    in_src_ipaddr   TEXT,
    in_src_port     TEXT,
    in_log_event    TEXT,
    in_uid          TEXT,
    in_log_date     TEXT
) RETURNS void AS $$
DECLARE
    a_subnet RECORD;
BEGIN
    SELECT * INTO a_subnet FROM inet_filter WHERE in_src_ipaddr::INET << deny_subnet;
    IF NOT FOUND THEN
        INSERT INTO inet_log (dst_ipaddr, src_ipaddr, src_port, log_event, uid, log_date)
            VALUES (in_dst_ipaddr::INET,
                    in_src_ipaddr::INET,
                    in_src_port :: INTEGER,
                    in_log_event::log_event_t,
                    in_uid,
                    in_log_date::TIMESTAMP WITH TIME ZONE);
    END IF;
END;
$$ LANGUAGE plpgsql;

--
-- Supplementary helper table:  map day-of-week integer to string
-- forms
--
CREATE TABLE dow_to_text(
    dow_value       SMALLINT UNIQUE NOT NULL CHECK (dow_value >= 0 AND dow_value <= 6),
    long_form       TEXT UNIQUE NOT NULL,
    abbrev          TEXT UNIQUE NOT NULL
);
INSERT INTO dow_to_text VALUES
    (0, 'Sunday', 'Sun'),
    (1, 'Monday', 'Mon'),
    (2, 'Tuesday', 'Tue'),
    (3, 'Wednesday', 'Wed'),
    (4, 'Thursday', 'Thu'),
    (5, 'Friday', 'Fri'),
    (6, 'Saturday', 'Sat');
