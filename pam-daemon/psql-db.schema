--
-- Put all the PAM stuff into its own schema:
--
CREATE SCHEMA pam;

--
-- PAM event types we expect to be logged:
--
CREATE TYPE pam.log_event_t AS ENUM ('unknown', 'auth', 'open_session', 'close_session');
--
-- Each connection attempt gets logged as the source IP address and TCP
-- port with the user identifier that was provided by the remote side.
--
CREATE TABLE pam.inet_log (
    dst_ipaddr      INET NOT NULL,
    src_ipaddr      INET NOT NULL,
    src_port        INTEGER NOT NULL,
    log_event       pam.log_event_t NOT NULL DEFAULT 'unknown',
    sshd_pid        INTEGER NOT NULL,
    uid             TEXT NOT NULL,
    log_date        TIMESTAMP WITH TIME ZONE DEFAULT now()
);
CREATE INDEX pam_inet_log_dst_ipaddr ON pam.inet_log(dst_ipaddr);
CREATE INDEX pam_inet_log_src_ipaddr ON pam.inet_log(src_ipaddr);
CREATE INDEX pam_inet_log_uid ON pam.inet_log(uid);


--
-- Each open_session event triggers the logging of the event
-- timestamp as the last known successful login of the user.
-- Note that even if the incoming timestamp is BEFORE an extant
-- tuple's last_event in this table, the new event's timestamp
-- will be retained.
--
CREATE TABLE pam.last_session (
    uid             TEXT UNIQUE NOT NULL,
    first_event     TIMESTAMP WITH TIME ZONE DEFAULT now(),
    last_event      TIMESTAMP WITH TIME ZONE DEFAULT now()
);
CREATE INDEX pam_last_session_uid ON pam.last_session(uid);
--
-- This rule automates the update of last_session on inserts
-- made to the inet_log table:
--
CREATE OR REPLACE RULE update_pam_last_session AS ON INSERT TO pam.inet_log
    WHERE log_event = 'open_session'
    DO ALSO INSERT INTO pam.last_session (uid, first_event, last_event)
        VALUES (NEW.uid, NEW.log_date, NEW.log_date)
        ON CONFLICT (uid) DO UPDATE SET last_event = EXCLUDED.last_event;
--
-- At any time the data currently present in the inet_log
-- table can be used to update the last_session table.  This
-- function does just that.
--
CREATE OR REPLACE FUNCTION pam.last_session_import() RETURNS INTEGER AS $$
DECLARE
    mtuple  RECORD;
    nrecs   INTEGER;
BEGIN
    nrecs := 0;
    FOR mtuple IN SELECT uid, log_date FROM pam.inet_log
            WHERE log_event = 'open_session' ORDER BY log_date ASC
    LOOP
        INSERT INTO pam.last_session (uid, first_event, last_event)
            VALUES (mtuple.uid, mtuple.log_date, mtuple.log_date)
            ON CONFLICT (uid) DO UPDATE SET last_event = EXCLUDED.last_event;
        nrecs := nrecs + 1;
    END LOOP;
    RETURN nrecs;
END;
$$ LANGUAGE plpgsql;


--
-- This table is present to provide a record layout for the fixed-prefix views
-- and arbitrary-prefix generator function.  The ipaddr (type INET) field is
-- replaced with an ipnet (type CIDR) field.
--
CREATE TABLE pam.nets (
    dst_ipaddr      INET NOT NULL,
    ipnet           CIDR UNIQUE NOT NULL,
    log_count       INTEGER NOT NULL DEFAULT 1,
    start_date      TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    end_date        TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE TABLE pam.agg_nets (
    ipnet           CIDR UNIQUE NOT NULL,
    log_count       INTEGER NOT NULL DEFAULT 1,
    start_date      TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    end_date        TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

--
-- Mimic the simpler by-count table format with the full data.  Rather
-- than create fixed-prefix views situated atop the ips view, we'll create
-- them explicitly attached to the original data source.
--
CREATE OR REPLACE VIEW pam.ips AS
    SELECT dst_ipaddr, src_ipaddr AS ipaddr, COUNT(*) as log_count, MIN(log_date) AS start_date, MAX(log_date) AS end_date
        FROM pam.inet_log
        GROUP BY dst_ipaddr, src_ipaddr;
CREATE OR REPLACE VIEW pam.nets_24 AS
    SELECT  dst_ipaddr,
            network(set_masklen(src_ipaddr, 24)) AS ipnet,
            COUNT(*) AS log_count,
            MIN(log_date) AS start_date,
            MAX(log_date) AS end_date
    FROM pam.inet_log
    GROUP BY dst_ipaddr, ipnet;
CREATE OR REPLACE VIEW pam.nets_16 AS
    SELECT  dst_ipaddr,
            network(set_masklen(src_ipaddr, 16)) AS ipnet,
            COUNT(*) AS log_count,
            MIN(log_date) AS start_date,
            MAX(log_date) AS end_date
    FROM pam.inet_log
    GROUP BY dst_ipaddr, ipnet;
CREATE OR REPLACE VIEW pam.nets_8 AS
    SELECT  dst_ipaddr,
            network(set_masklen(src_ipaddr, 8)) AS ipnet,
            COUNT(*) AS log_count,
            MIN(log_date) AS start_date,
            MAX(log_date) AS end_date
    FROM pam.inet_log
    GROUP BY dst_ipaddr, ipnet;
CREATE OR REPLACE FUNCTION pam.nets_view(prefix_len INTEGER) RETURNS SETOF pam.nets
AS $$
    SELECT  dst_ipaddr,
            network(set_masklen(src_ipaddr, prefix_len)) AS ipnet,
            COUNT(*) AS log_count,
            MIN(log_date) AS start_date,
            MAX(log_date) AS end_date
    FROM pam.inet_log
    GROUP BY dst_ipaddr, ipnet;
$$ LANGUAGE SQL;


CREATE OR REPLACE VIEW pam.agg_ips AS
    SELECT src_ipaddr AS ipaddr, COUNT(*) as log_count, MIN(log_date) AS start_date, MAX(log_date) AS end_date
        FROM pam.inet_log
        GROUP BY src_ipaddr;
CREATE OR REPLACE VIEW pam.agg_nets_24 AS
    SELECT  network(set_masklen(src_ipaddr, 24)) AS ipnet,
            COUNT(*) AS log_count,
            MIN(log_date) AS start_date,
            MAX(log_date) AS end_date
    FROM pam.inet_log
    GROUP BY ipnet;
CREATE OR REPLACE VIEW pam.agg_nets_16 AS
    SELECT  network(set_masklen(src_ipaddr, 16)) AS ipnet,
            COUNT(*) AS log_count,
            MIN(log_date) AS start_date,
            MAX(log_date) AS end_date
    FROM pam.inet_log
    GROUP BY ipnet;
CREATE OR REPLACE VIEW pam.agg_nets_8 AS
    SELECT  network(set_masklen(src_ipaddr, 8)) AS ipnet,
            COUNT(*) AS log_count,
            MIN(log_date) AS start_date,
            MAX(log_date) AS end_date
    FROM pam.inet_log
    GROUP BY ipnet;
CREATE OR REPLACE FUNCTION pam.agg_nets_view(prefix_len INTEGER) RETURNS SETOF pam.agg_nets
AS $$
    SELECT  network(set_masklen(src_ipaddr, prefix_len)) AS ipnet,
            COUNT(*) AS log_count,
            MIN(log_date) AS start_date,
            MAX(log_date) AS end_date
    FROM pam.inet_log
    GROUP BY ipnet;
$$ LANGUAGE SQL;

--
-- Rather than have the daemon do INSERTs into the table, data
-- injection is via this function.  If the internal structure of the
-- table were to change, altering the INSERT query, this function
-- can be altered without having to rebuild the daemon.
--
-- Likewise, if we need to do some filtering of incoming data, this
-- function could be modified to pre-flight the data and do the INSERT
-- only when necessary (again, without any change to the daemon).
--
CREATE OR REPLACE FUNCTION pam.log_one_event(
    in_dst_ipaddr   TEXT,
    in_src_ipaddr   TEXT,
    in_src_port     TEXT,
    in_log_event    TEXT,
    in_sshd_pid     TEXT,
    in_uid          TEXT,
    in_log_date     TEXT
) RETURNS void AS $$
    INSERT INTO pam.inet_log (dst_ipaddr, src_ipaddr, src_port, log_event, sshd_pid, uid, log_date)
        VALUES (in_dst_ipaddr:: INET,
                in_src_ipaddr:: INET,
                in_src_port  :: INTEGER,
                in_log_event :: pam.log_event_t,
                in_sshd_pid  :: INTEGER,
                in_uid,
                in_log_date::TIMESTAMP WITH TIME ZONE);
$$ LANGUAGE SQL;


--
-- This variant on the log_one_event() function consults a table
-- of subnets (as CIDR tuples) for events we don't want to log.
-- If the event src_ipaddr is within any of the subnets listed,
-- the event is NOT logged.
--
-- The conditional means we can't just do an SQL stored function
-- and we need PL/pgSQL.
--
CREATE TABLE pam.inet_filter (
    deny_subnet     CIDR UNIQUE NOT NULL
);
--
CREATE OR REPLACE FUNCTION pam.log_one_event(
    in_dst_ipaddr   TEXT,
    in_src_ipaddr   TEXT,
    in_src_port     TEXT,
    in_log_event    TEXT,
    in_sshd_pid     TEXT,
    in_uid          TEXT,
    in_log_date     TEXT
) RETURNS void AS $$
DECLARE
    a_subnet RECORD;
BEGIN
    SELECT * INTO a_subnet FROM pam.inet_filter WHERE in_src_ipaddr::INET << deny_subnet;
    IF NOT FOUND THEN
        INSERT INTO pam.inet_log (dst_ipaddr, src_ipaddr, src_port, log_event, sshd_pid, uid, log_date)
            VALUES (in_dst_ipaddr :: INET,
                    in_src_ipaddr :: INET,
                    in_src_port   :: INTEGER,
                    in_log_event  :: pam.log_event_t,
                    in_sshd_pid   :: INTEGER,
                    in_uid,
                    in_log_date::TIMESTAMP WITH TIME ZONE);
    END IF;
END;
$$ LANGUAGE plpgsql;

--
-- Supplementary helper table:  map day-of-week integer to string
-- forms
--
CREATE TABLE pam.dow_to_text(
    dow_value       SMALLINT UNIQUE NOT NULL CHECK (dow_value >= 0 AND dow_value <= 6),
    long_form       TEXT UNIQUE NOT NULL,
    abbrev          TEXT UNIQUE NOT NULL
);
INSERT INTO pam.dow_to_text VALUES
    (0, 'Sunday', 'Sun'),
    (1, 'Monday', 'Mon'),
    (2, 'Tuesday', 'Tue'),
    (3, 'Wednesday', 'Wed'),
    (4, 'Thursday', 'Thu'),
    (5, 'Friday', 'Fri'),
    (6, 'Saturday', 'Sat');
